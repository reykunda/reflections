What happens when you initialize a repository? Why do you need to do it?
The git config files for the repo are created. This allows you to run git
commands on the files and save versions.
An empty git repo is created in the directory. Files in the directory can then
be added to the repo for version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging area shows you which files have changed from the current checked out
commit, and the which files out of the changed files are to be committed or not.
The staging area allows you to commit some of the files changed.

How can you use the staging area to make sure you have one commit per logical change?
You can make multiple logical changes but the staging area allows you to pick
which of the changed files you want to add to the commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
When you want to add multiple experimental changes to the code.
Branches let you keep the changes separate.

How do the diagrams help you visualize the branch structure?
They allow you to see commits that you would not be able to see through git log.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Merging two branches consolidates the changes in each branch since their divergence.
It is represented in the diagram as merging the two instead of committing one
branch over the other because changes from both branches are saved.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: Fast, git shows you the changes for the merge
Cons: Conflicts need to be resolved manually
